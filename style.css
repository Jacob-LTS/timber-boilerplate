/*!
Theme Name:   Timber Boilerplate Theme
Theme URI:    https://github.com/certainlyakey/timber-boilerplate
Description:  This is a boilerplate theme using Timber
Version:      1.0
Author:       Aleksandr Beliaev
Text Domain:  theme_domain
Domain Path:  /languages/
*/
/* stylelint-disable plugin/at-rule-import-path */
.u-screenreader-text {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: none;
  white-space: nowrap; }

html:not(.no-js) .js-hidden-if-js-on {
  display: none; }

.u-inner-layer {
  position: relative;
  z-index: 1; }

.u-nowrap {
  white-space: nowrap; }

.js-hidden,
.u-hidden {
  display: none; }

/* stylelint-enable plugin/at-rule-import-path */
/* stylelint-disable plugin/at-rule-import-path */
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0; }

/**
 * Render the `main` element consistently in IE.
 */
main {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */ }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none; }

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none; }

/* stylelint-enable plugin/at-rule-import-path */
/* stylelint-disable color-no-hex */
/* stylelint-disable indentation */
/* stylelint-enable indentation */
/* stylelint-disable meowtec/no-px */
/* stylelint-enable meowtec/no-px */
/* stylelint-disable selector-max-universal, selector-max-type */
h1, h2, h3, h4, h5, h6, p, dl, dd, ul, ol, li, figure {
  margin: 0;
  padding: 0; }

h1, h2, h3, h4, h5, h6 {
  font-weight: normal;
  font-size: 100%; }

ul {
  list-style: none; }

html {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

*, *::before, *::after {
  -webkit-box-sizing: inherit;
          box-sizing: inherit; }

ol, ul {
  list-style-position: inside; }

textarea {
  max-width: 100%;
  resize: vertical; }

fieldset {
  border: none;
  margin: 0;
  padding: 0; }

select {
  color: black; }

iframe {
  border: none; }

/* stylelint-disable declaration-no-important, selector-max-universal */
body {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-size: 16px;
  line-height: 1.6;
  background-color: white; }

a {
  color: #ee2d29;
  text-decoration: none; }

.s-textcontent {
  /* stylelint-disable selector-max-type, selector-max-compound-selectors */
  /* stylelint-enable selector-max-type, selector-max-compound-selectors */ }
  .s-textcontent > blockquote {
    font-style: italic; }
  .s-textcontent > p:not(:only-child), .s-textcontent > ul:not(:only-child), .s-textcontent > ol:not(:only-child) {
    margin-top: 10px;
    margin-bottom: 10px; }
  .s-textcontent > h2:first-child, .s-textcontent > h3:first-child, .s-textcontent > h4:first-child, .s-textcontent > h5:first-child, .s-textcontent > h6:first-child, .s-textcontent > p:first-child, .s-textcontent > ul:first-child, .s-textcontent > ol:first-child {
    margin-top: 0; }
  .s-textcontent > h2:last-child, .s-textcontent > h3:last-child, .s-textcontent > h4:last-child, .s-textcontent > h5:last-child, .s-textcontent > h6:last-child, .s-textcontent > p:last-child, .s-textcontent > ul:last-child, .s-textcontent > ol:last-child {
    margin-bottom: 0; }
  .s-textcontent > ul li {
    list-style-type: disc; }
  .s-textcontent > ul li li, .s-textcontent > ol li li {
    padding-left: 20px; }
  .s-textcontent img {
    display: block; }
    @media (max-width: 63.99em) {
      .s-textcontent img {
        max-width: 100%;
        display: block;
        height: auto; } }
  .s-textcontent iframe {
    width: 100%; }

.is-page-loading * {
  -webkit-transition: none !important;
  -o-transition: none !important;
  transition: none !important; }

.u-link {
  color: #ee2d29;
  text-decoration: none; }

.u-link-button {
  color: #ee2d29;
  text-decoration: none;
  border: none;
  background: none;
  -webkit-box-shadow: none;
          box-shadow: none;
  padding: 0; }

.c-edit-link {
  position: fixed;
  top: 1em;
  left: 1em;
  opacity: 0; }
  .c-edit-link:hover {
    opacity: 1; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
